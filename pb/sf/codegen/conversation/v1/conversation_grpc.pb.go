// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: sf/codegen/conversation/v1/conversation.proto

package pbconvo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ConversationService_Converse_FullMethodName = "/sf.codegen.conversation.v1.ConversationService/Converse"
	ConversationService_Discover_FullMethodName = "/sf.codegen.conversation.v1.ConversationService/Discover"
)

// ConversationServiceClient is the client API for ConversationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationServiceClient interface {
	Converse(ctx context.Context, opts ...grpc.CallOption) (ConversationService_ConverseClient, error)
	Discover(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type conversationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationServiceClient(cc grpc.ClientConnInterface) ConversationServiceClient {
	return &conversationServiceClient{cc}
}

func (c *conversationServiceClient) Converse(ctx context.Context, opts ...grpc.CallOption) (ConversationService_ConverseClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConversationService_ServiceDesc.Streams[0], ConversationService_Converse_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &conversationServiceConverseClient{ClientStream: stream}
	return x, nil
}

type ConversationService_ConverseClient interface {
	Send(*UserInput) error
	Recv() (*SystemOutput, error)
	grpc.ClientStream
}

type conversationServiceConverseClient struct {
	grpc.ClientStream
}

func (x *conversationServiceConverseClient) Send(m *UserInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conversationServiceConverseClient) Recv() (*SystemOutput, error) {
	m := new(SystemOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conversationServiceClient) Discover(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoveryResponse)
	err := c.cc.Invoke(ctx, ConversationService_Discover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationServiceServer is the server API for ConversationService service.
// All implementations must embed UnimplementedConversationServiceServer
// for forward compatibility
type ConversationServiceServer interface {
	Converse(ConversationService_ConverseServer) error
	Discover(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
	mustEmbedUnimplementedConversationServiceServer()
}

// UnimplementedConversationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConversationServiceServer struct {
}

func (UnimplementedConversationServiceServer) Converse(ConversationService_ConverseServer) error {
	return status.Errorf(codes.Unimplemented, "method Converse not implemented")
}
func (UnimplementedConversationServiceServer) Discover(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedConversationServiceServer) mustEmbedUnimplementedConversationServiceServer() {}

// UnsafeConversationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServiceServer will
// result in compilation errors.
type UnsafeConversationServiceServer interface {
	mustEmbedUnimplementedConversationServiceServer()
}

func RegisterConversationServiceServer(s grpc.ServiceRegistrar, srv ConversationServiceServer) {
	s.RegisterService(&ConversationService_ServiceDesc, srv)
}

func _ConversationService_Converse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConversationServiceServer).Converse(&conversationServiceConverseServer{ServerStream: stream})
}

type ConversationService_ConverseServer interface {
	Send(*SystemOutput) error
	Recv() (*UserInput, error)
	grpc.ServerStream
}

type conversationServiceConverseServer struct {
	grpc.ServerStream
}

func (x *conversationServiceConverseServer) Send(m *SystemOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conversationServiceConverseServer) Recv() (*UserInput, error) {
	m := new(UserInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ConversationService_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_Discover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).Discover(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationService_ServiceDesc is the grpc.ServiceDesc for ConversationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.codegen.conversation.v1.ConversationService",
	HandlerType: (*ConversationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discover",
			Handler:    _ConversationService_Discover_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Converse",
			Handler:       _ConversationService_Converse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sf/codegen/conversation/v1/conversation.proto",
}
