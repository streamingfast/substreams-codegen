mod abi;
mod pb;
use hex_literal::hex;
use pb::contract::v1 as contract;
{{- if $.HasFactoryTrackers }}
use substreams::prelude::*;
use substreams::store;
{{- end }}
use substreams::Hex;
{{- if .IsOutputSQL -}}
use substreams_database_change::pb::database::DatabaseChanges;
use substreams_database_change::tables::Tables as DatabaseChangeTables;
{{- end -}}{{/* if IsOutputSQL */}}
{{- if .IsOutputSubgraph -}}
use substreams_entity_change::pb::entity::EntityChanges;
use substreams_entity_change::tables::Tables as EntityChangesTables;
{{- end -}}{{/* if IsOutputSubgraph */}}
use substreams_ethereum::pb::eth::v2 as eth;
{{- if .TrackAnyEvents }}
use substreams_ethereum::Event;
{{- end }}

#[allow(unused_imports)]
use num_traits::cast::ToPrimitive;
use std::str::FromStr;
use substreams::scalar::BigDecimal;

substreams_ethereum::init!();

{{ range $i, $contract := .Contracts -}}
const {{ $contract.IdentifierUpper }}_TRACKED_CONTRACT: [u8; 20] = hex!("{{ $contract.PlainAddress }}");
{{ end }}

{{- range $i, $contract := .Contracts }}
{{- if $contract.TrackEvents }}
fn map_{{ $contract.Identifier }}_events(blk: &eth::Block, events: &mut contract::Events) {
    {{- range $event := $contract.EventModels }}
    {{- $rust := $event.Rust }}
    events.{{ $contract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.append(&mut blk
        .receipts()
        .flat_map(|view| {
            view.receipt.logs.iter()
                .filter(|log| log.address == {{ $contract.IdentifierUpper }}_TRACKED_CONTRACT)
                .filter_map(|log| {
                    if let Some(event) = abi::{{ $contract.Identifier }}_contract::events::{{$rust.ABIStructName}}::match_and_decode(log) {
                        return Some(contract::{{ $contract.IdentifierPascalCase }}{{$rust.ProtoMessageName}} {
                            evt_tx_hash: Hex(&view.transaction.hash).to_string(),
                            evt_index: log.block_index,
                            evt_block_time: Some(blk.timestamp().to_owned()),
                            evt_block_number: blk.number,
                            {{- range $protoField, $abiToProtoConversion := $rust.ProtoFieldABIConversionMap }}
                            {{$protoField}}: {{$abiToProtoConversion}},
                            {{- end}}
                        });
                    }

                    None
                })
        })
        .collect());
    {{- end }}
}
{{- end }}
{{- if $contract.TrackCalls }}
fn map_{{ $contract.Identifier }}_calls(blk: &eth::Block, calls: &mut contract::Calls) {
    {{- range $call := $contract.CallModels }}
    {{- $rust := $call.Rust }}
    calls.{{ $contract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.append(&mut blk
        .transactions()
        .flat_map(|tx| {
            tx.calls.iter()
                .filter(|call| call.address == {{ toUpper $contract.IdentifierUpper }}_TRACKED_CONTRACT && abi::{{ $contract.Identifier }}_contract::functions::{{$rust.ABIStructName}}::match_call(call))
                .filter_map(|call| {
                    match abi::{{ $contract.Identifier }}_contract::functions::{{$rust.ABIStructName}}::decode(call) {
                        Ok(decoded_call) => {
                            {{- if $rust.OutputFieldsString }}
                            let {{ $rust.OutputFieldsString }} = match abi::{{ $contract.Identifier }}_contract::functions::{{$rust.ABIStructName}}::output(&call.return_data) {
                                Ok({{ $rust.OutputFieldsString }}) => {{`{`}}{{ $rust.OutputFieldsString }}{{`}`}}
                                Err(_) => Default::default(),
                            };
                            {{ end }}
                            Some(contract::{{ $contract.IdentifierPascalCase }}{{$rust.ProtoMessageName}} {
                                call_tx_hash: Hex(&tx.hash).to_string(),
                                call_block_time: Some(blk.timestamp().to_owned()),
                                call_block_number: blk.number,
                                call_ordinal: call.begin_ordinal,
                                call_success: !call.state_reverted,
                                {{- range $protoField, $abiToProtoConversion := $rust.ProtoFieldABIConversionMap }}
                                {{$protoField}}: {{$abiToProtoConversion}},
                                {{- end}}
                            })
                        },
                        Err(_) => None,
                    }
                })
        })
        .collect());
    {{- end }}{{/* range $contract.EventModels */}}
}
{{ end }}{{/* if $contract.TrackCalls */}}
{{- end }}{{/* range .Contracts */}}
{{- if and $.TrackAnyEvents $.TrackAnyCalls }}
#[substreams::handlers::map]
fn zipped_events_calls(
    events: contract::Events,
    calls: contract::Calls,
) -> Result<contract::EventsCalls, substreams::errors::Error> {
    Ok(contract::EventsCalls {
        events: Some(events),
        calls: Some(calls),
    })
}
{{- end }}
{{- if $.HasFactoryTrackers }}
fn is_declared_dds_address(addr: &Vec<u8>, ordinal: u64, dds_store: &store::StoreGetInt64) -> bool {
    //    substreams::log::info!("Checking if address {} is declared dds address", Hex(addr).to_string());
    if dds_store.get_at(ordinal, Hex(addr).to_string()).is_some() {
        return true;
    }
    return false;
}
{{- end -}}

{{- range $index, $ddsContract := .DynamicContracts }}
{{- if $ddsContract.TrackEvents }}
fn map_{{ $ddsContract.Identifier }}_events(
    blk: &eth::Block,
    dds_store: &store::StoreGetInt64,
    events: &mut contract::Events,
) {
    {{- range $index, $event := $ddsContract.EventModels }}
    {{- $rust := $event.Rust }}

    events.{{ $ddsContract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.append(&mut blk
        .receipts()
        .flat_map(|view| {
            view.receipt.logs.iter()
                .filter(|log| is_declared_dds_address(&log.address, log.ordinal, dds_store))
                .filter_map(|log| {
                    if let Some(event) = abi::{{ $ddsContract.Identifier }}_contract::events::{{$rust.ABIStructName}}::match_and_decode(log) {
                        return Some(contract::{{ $ddsContract.IdentifierPascalCase }}{{$rust.ProtoMessageName}} {
                            evt_tx_hash: Hex(&view.transaction.hash).to_string(),
                            evt_index: log.block_index,
                            evt_block_time: Some(blk.timestamp().to_owned()),
                            evt_block_number: blk.number,
                            evt_address: Hex(&log.address).to_string(),
                            {{- range $protoField, $abiToProtoConversion := $rust.ProtoFieldABIConversionMap }}
                            {{$protoField}}: {{$abiToProtoConversion}},
                            {{- end}}
                        });
                    }

                    None
                })
        })
        .collect());
    {{- end }}{{/* range $ddsContract.EventModels */}}
}
{{- end }}
{{- if $ddsContract.TrackCalls }}
fn map_{{ $ddsContract.Identifier }}_calls(
    blk: &eth::Block,
    dds_store: &store::StoreGetInt64,
    calls: &mut contract::Calls,
) {
    {{- range $i, $call := $ddsContract.CallModels }}
    {{- $rust := $call.Rust }}
    calls.{{ $ddsContract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.append(&mut blk
        .transactions()
        .flat_map(|tx| {
            tx.calls.iter()
                .filter(|call| is_declared_dds_address(&call.address, call.begin_ordinal, dds_store) && abi::{{ $ddsContract.Identifier }}_contract::functions::{{$rust.ABIStructName}}::match_call(call))
                .filter_map(|call| {
                    match abi::{{ $ddsContract.Identifier }}_contract::functions::{{$rust.ABIStructName}}::decode(call) {
                            Ok(decoded_call) => {
                            {{- if $rust.OutputFieldsString }}
                            let {{ $rust.OutputFieldsString }} = match abi::{{ $ddsContract.Identifier }}_contract::functions::{{$rust.ABIStructName}}::output(&call.return_data) {
                                Ok({{ $rust.OutputFieldsString }}) => {{`{`}}{{ $rust.OutputFieldsString }}{{`}`}}
                                Err(_) => Default::default(),
                            };
                            {{ end }}
                            Some(contract::{{ $ddsContract.IdentifierPascalCase }}{{$rust.ProtoMessageName}} {
                                call_tx_hash: Hex(&tx.hash).to_string(),
                                call_block_time: Some(blk.timestamp().to_owned()),
                                call_block_number: blk.number,
                                call_ordinal: call.begin_ordinal,
                                call_success: !call.state_reverted,
                                call_address: Hex(&call.address).to_string(),
                                {{- range $protoField, $abiToProtoConversion := $rust.ProtoFieldABIConversionMap }}
                                {{$protoField}}: {{$abiToProtoConversion}},
                                {{- end}}
                            })
                        },
                        Err(_) => None,
                    }
                })
        })
        .collect());
    {{- end }}{{/* range $ddsContract.CallModels */}}
}
{{ end }}{{/* if $ddsContract.TrackCalls */}}
{{ end }}{{/* range $contact.DynamicContracts */}}

{{- if .IsOutputSQL }}
{{- range $i, $contract := .Contracts }}
{{- if $contract.TrackEvents }}
fn db_{{ $contract.Identifier }}_out(events: &contract::Events, tables: &mut DatabaseChangeTables) {
    // Loop over all the abis events to create table changes
    {{- range $index, $event := $contract.EventModels }}
    {{- $rust := $event.Rust }}
    events.{{ $contract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|evt| {
        tables
            .create_row("{{ $contract.Identifier }}_{{ $rust.TableChangeEntityName }}", [("evt_tx_hash", evt.evt_tx_hash.to_string()),("evt_index", evt.evt_index.to_string())])
            .set("evt_block_time", evt.evt_block_time.as_ref().unwrap())
            .set("evt_block_number", evt.evt_block_number)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $changesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.{{$changesToProtoConversion.Setter}}("{{$protoField}}", {{$changesToProtoConversion.ValueAccessCode}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}{{/* range EventModels */}}
}
{{- end }}{{/* if TrackEvents */}}
{{- if $contract.TrackCalls }}
fn db_{{ $contract.Identifier }}_calls_out(calls: &contract::Calls, tables: &mut DatabaseChangeTables) {
    // Loop over all the abis calls to create table changes
    {{- range $index, $call := $contract.CallModels }}
    {{- $rust := $call.Rust }}
    calls.{{ $contract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|call| {
        tables
            .create_row("{{ $contract.Identifier }}_{{ $rust.TableChangeEntityName }}", [("call_tx_hash", call.call_tx_hash.to_string()),("call_ordinal", call.call_ordinal.to_string())])
            .set("call_block_time", call.call_block_time.as_ref().unwrap())
            .set("call_block_number", call.call_block_number)
            .set("call_success", call.call_success)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $changesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.{{$changesToProtoConversion.Setter}}("{{$protoField}}", {{$changesToProtoConversion.ValueAccessCode}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}{{/* range CallModels */}}
}
{{- end }}{{/* if TrackCalls */}}
{{- end }}{{/* range Contracts */}}

{{- range $index, $ddsContract := .DynamicContracts }}
{{- if $ddsContract.TrackEvents }}
fn db_{{ $ddsContract.Identifier }}_out(events: &contract::Events, tables: &mut DatabaseChangeTables) {
    // Loop over all the abis events to create table changes
    {{- range $index, $event := $ddsContract.EventModels }}
    {{- $rust := $event.Rust }}
    events.{{ $ddsContract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|evt| {
        tables
            .create_row("{{ $ddsContract.Identifier }}_{{ $rust.TableChangeEntityName }}", [("evt_tx_hash", evt.evt_tx_hash.to_string()),("evt_index", evt.evt_index.to_string())])
            .set("evt_block_time", evt.evt_block_time.as_ref().unwrap())
            .set("evt_block_number", evt.evt_block_number)
            .set("evt_address", &evt.evt_address)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $changesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.{{$changesToProtoConversion.Setter}}("{{$protoField}}", {{$changesToProtoConversion.ValueAccessCode}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}{{/* range EventModels */}}
}
{{- end }}{{/* if TrackEvents */}}
{{- if $ddsContract.TrackCalls }}
fn db_{{ $ddsContract.Identifier }}_calls_out(calls: &contract::Calls, tables: &mut DatabaseChangeTables) {
    // Loop over all the abis calls to create table changes
    {{- range $index, $call := $ddsContract.CallModels }}
    {{- $rust := $call.Rust }}
    calls.{{ $ddsContract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|call| {
        tables
            .create_row("{{ $ddsContract.Identifier }}_{{ $rust.TableChangeEntityName }}", [("call_tx_hash", call.call_tx_hash.to_string()),("call_ordinal", call.call_ordinal.to_string())])
            .set("call_block_time", call.call_block_time.as_ref().unwrap())
            .set("call_block_number", call.call_block_number)
            .set("call_success", call.call_success)
            .set("call_address", &call.call_address)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $changesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.{{$changesToProtoConversion.Setter}}("{{$protoField}}", {{$changesToProtoConversion.ValueAccessCode}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}
}
{{- end }}{{/* if TrackCalls */}}
{{- end }}{{/* range DynamicContracts */}}
{{- end -}}{{/* if IsOutputSQL */}}

{{- if .IsOutputSubgraph }}
{{ range $i, $contract := .Contracts }}
{{- if $contract.TrackEvents }}
fn graph_{{ $contract.Identifier }}_out(events: &contract::Events, tables: &mut EntityChangesTables) {
    // Loop over all the abis events to create table changes
    {{- range $index, $event := $contract.EventModels }}
    {{- $rust := $event.Rust }}
    events.{{ $contract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|evt| {
        tables
            .create_row("{{ $contract.Identifier }}_{{ $rust.TableChangeEntityName }}", format!("{}-{}", evt.evt_tx_hash, evt.evt_index))
            .set("evt_tx_hash", &evt.evt_tx_hash)
            .set("evt_index", evt.evt_index)
            .set("evt_block_time", evt.evt_block_time.as_ref().unwrap())
            .set("evt_block_number", evt.evt_block_number)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $changesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.set("{{$protoField}}", {{$changesToProtoConversion.ValueAccessCode}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}
}
{{- end }}{{/* if TrackEvents */}}
{{- if $contract.TrackCalls }}
fn graph_{{ $contract.Identifier }}_calls_out(calls: &contract::Calls, tables: &mut EntityChangesTables) {
    // Loop over all the abis calls to create table changes
    {{- range $index, $call := $contract.CallModels }}
    {{- $rust := $call.Rust }}
    calls.{{ $contract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|call| {
        tables
            .create_row("{{ $contract.Identifier }}_{{ $rust.TableChangeEntityName }}", format!("{}-{}", call.call_tx_hash, call.call_ordinal))
            .set("call_tx_hash", &call.call_tx_hash)
            .set("call_ordinal", call.call_ordinal)
            .set("call_block_time", call.call_block_time.as_ref().unwrap())
            .set("call_block_number", call.call_block_number)
            .set("call_success", call.call_success)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $changesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.set("{{$protoField}}", {{$changesToProtoConversion.ValueAccessCode}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}
  }
{{- end }}{{/* if TrackCalls */}}
{{- end }}{{/* range Contracts */}}
{{- range $index, $ddsContract := .DynamicContracts }}
{{- if $ddsContract.TrackEvents }}
fn graph_{{ $ddsContract.Identifier }}_out(events: &contract::Events, tables: &mut EntityChangesTables) {
    // Loop over all the abis events to create table changes
    {{- range $index, $event := $ddsContract.EventModels }}
    {{- $rust := $event.Rust }}
    events.{{ $ddsContract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|evt| {
        tables
            .create_row("{{ $ddsContract.Identifier }}_{{ $rust.TableChangeEntityName }}", format!("{}-{}", evt.evt_tx_hash, evt.evt_index))
            .set("evt_tx_hash", &evt.evt_tx_hash)
            .set("evt_index", evt.evt_index)
            .set("evt_block_time", evt.evt_block_time.as_ref().unwrap())
            .set("evt_block_number", evt.evt_block_number)
            .set("evt_address", &evt.evt_address)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $changesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.set("{{$protoField}}", {{$changesToProtoConversion.ValueAccessCode}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}
}
{{- end}}
{{- if $ddsContract.TrackCalls }}
fn graph_{{ $ddsContract.Identifier }}_calls_out(calls: &contract::Calls, tables: &mut EntityChangesTables) {
    // Loop over all the abis calls to create table changes
    {{- range $index, $call := $ddsContract.CallModels }}
    {{- $rust := $call.Rust }}
    calls.{{ $ddsContract.IdentifierSnakeCase }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|call| {
        tables
            .create_row("{{ $ddsContract.Identifier }}_{{ $rust.TableChangeEntityName }}", format!("{}-{}", call.call_tx_hash, call.call_ordinal))
            .set("call_tx_hash", &call.call_tx_hash)
            .set("call_ordinal", call.call_ordinal)
            .set("call_block_time", call.call_block_time.as_ref().unwrap())
            .set("call_block_number", call.call_block_number)
            .set("call_success", call.call_success)
            .set("call_address", &call.call_address)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $changesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.set("{{$protoField}}", {{$changesToProtoConversion.ValueAccessCode}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}
  }
{{- end }}
{{- end }}{{/* range DynamicContracts */}}
{{- end -}}{{/* if IsOutputSubgraph */}}

{{- range $index, $ddsContract := .DynamicContracts }}
#[substreams::handlers::store]
fn store_{{ $ddsContract.Identifier }}_created(blk: eth::Block, store: StoreSetInt64) {
    {{- $parentContract := $ddsContract.ParentContract }}
    for rcpt in blk.receipts() {
        for log in rcpt
            .receipt
            .logs
            .iter()
            .filter(|log| log.address == {{ $parentContract.IdentifierUpper }}_TRACKED_CONTRACT)
        {
            if let Some(event) = abi::{{ $parentContract.Identifier }}_contract::events::{{ $parentContract.FactoryCreationEventName }}::match_and_decode(log) {
                store.set(log.ordinal, Hex(event.{{ $parentContract.FactoryCreationEventFieldName }}).to_string(), &1);
            }
        }
    }
}
{{- end }}{{/* range DynamicContracts */}}

{{- if .TrackAnyEvents }}
#[substreams::handlers::map]
{{- if .HasFactoryTrackers }}
fn map_events(
    blk: eth::Block,
    {{- range $index, $ddsContract := .DynamicContracts }}
    {{- if $ddsContract.TrackEvents }}
    store_{{ $ddsContract.Identifier }}: StoreGetInt64,
    {{- end }}
    {{- end }}
) -> Result<contract::Events, substreams::errors::Error> {
{{- else }}
fn map_events(blk: eth::Block) -> Result<contract::Events, substreams::errors::Error> {
{{- end }}
    let mut events = contract::Events::default();
    {{- range $i, $contract := .Contracts }}
    {{- if $contract.TrackEvents }}
    map_{{ $contract.Identifier }}_events(&blk, &mut events);
    {{- end }}
    {{- end }}
    {{- range $index, $ddsContract := .DynamicContracts }}
    {{- if $ddsContract.TrackEvents }}
    map_{{ $ddsContract.Identifier }}_events(&blk, &store_{{ $ddsContract.Identifier }}, &mut events);
    {{- end }}
    {{- end }}
    substreams::skip_empty_output();
    Ok(events)
}
{{- end }}

{{- if .TrackAnyCalls }}
#[substreams::handlers::map]
{{- if .HasFactoryTrackers }}
fn map_calls(
    blk: eth::Block,
    {{- range $index, $ddsContract := .DynamicContracts }}
    {{- if $ddsContract.TrackCalls }}
    store_{{ $ddsContract.Identifier }}: StoreGetInt64,{{ end }}
    {{ end }}
) -> Result<contract::Calls, substreams::errors::Error> {
{{- else }}
fn map_calls(blk: eth::Block) -> Result<contract::Calls, substreams::errors::Error> {
{{- end }}
let mut calls = contract::Calls::default();
{{- $ddsContracts := .DynamicContracts -}}
{{- range $i, $contract := .Contracts }}
{{- if $contract.TrackCalls }}
    map_{{ $contract.Identifier }}_calls(&blk, &mut calls);
{{- end }}
{{- range $index, $ddsContract := $ddsContracts }}
{{- if $ddsContract.TrackCalls }}
    map_{{ $ddsContract.Identifier }}_calls(&blk, &store_{{ $ddsContract.Identifier }}, &mut calls);
{{- end }}
{{- end }}
{{- end }}
    substreams::skip_empty_output();
    Ok(calls)
}
{{- end }}

{{- if .IsOutputSQL }}
#[substreams::handlers::map]
{{- if .TrackOnlyEvents }}
fn db_out(events: contract::Events) -> Result<DatabaseChanges, substreams::errors::Error> {
{{- else if .TrackOnlyCalls}}
fn db_out(calls: contract::Calls) -> Result<DatabaseChanges, substreams::errors::Error> {
{{- else }}
fn db_out(events: contract::Events, calls: contract::Calls) -> Result<DatabaseChanges, substreams::errors::Error> {
{{- end }}
    // Initialize Database Changes container
    let mut tables = DatabaseChangeTables::new();
    {{- range $i, $contract := .Contracts }}
    {{- if $contract.TrackEvents }}
    db_{{ $contract.Identifier }}_out(&events, &mut tables);
    {{- end }}
    {{- if $contract.TrackCalls }}
    db_{{ $contract.Identifier }}_calls_out(&calls, &mut tables);{{ end }}
    {{- end }}
    {{- range $index, $ddsContract := .DynamicContracts }}
    {{- if $ddsContract.TrackEvents }}
    db_{{ $ddsContract.Identifier }}_out(&events, &mut tables);
    {{- end }}
    {{- if $ddsContract.TrackCalls }}
    db_{{ $ddsContract.Identifier }}_calls_out(&calls, &mut tables);{{ end }}
    {{- end }}
    Ok(tables.to_database_changes())
}
{{- end -}}{{/* if IsOutputSQL */}}

{{- if .IsOutputSubgraph }}
#[substreams::handlers::map]
{{- if .TrackOnlyEvents }}
fn graph_out(events: contract::Events) -> Result<EntityChanges, substreams::errors::Error> {
{{- else if .TrackOnlyCalls }}
fn graph_out(calls: contract::Calls) -> Result<EntityChanges, substreams::errors::Error> {
{{- else }}
fn graph_out(events: contract::Events, calls: contract::Calls) -> Result<EntityChanges, substreams::errors::Error> {
{{- end }}
    // Initialize Database Changes container
    let mut tables = EntityChangesTables::new();
    {{- range $i, $contract := .Contracts }}
    {{- if $contract.TrackEvents }}
    graph_{{ $contract.Identifier }}_out(&events, &mut tables);
    {{- end }}
    {{- if $contract.TrackCalls }}
    graph_{{ $contract.Identifier }}_calls_out(&calls, &mut tables);{{ end }}
    {{- end }}
    {{- range $index, $ddsContract := .DynamicContracts }}
    {{- if $ddsContract.TrackEvents }}
    graph_{{ $ddsContract.Identifier }}_out(&events, &mut tables);
    {{- end }}
    {{- if $ddsContract.TrackCalls }}
    graph_{{ $ddsContract.Identifier }}_calls_out(&calls, &mut tables);{{ end }}
    {{- end }}
    Ok(tables.to_entity_changes())
}
{{- end -}}{{/* if IsOutputSubgraph */}}

