mod pb;

use core::panic;
use pb::sf::substreams::starknet::r#type::v1::Transactions;
use substreams_database_change::pb::database::DatabaseChanges;
use substreams_database_change::tables::Tables as DatabaseChangeTables;
use substreams_database_change::change::AsString;
use crate::pb::sf::starknet::r#type::v1::transaction_with_receipt::Transaction;

#[substreams::handlers::map]
fn db_out(transactions: Transactions) -> Result<DatabaseChanges, substreams::errors::Error> {
    let mut tables = DatabaseChangeTables::new();

    let block_number = transactions.clone().clock.unwrap().number;
    let block_hash = transactions.clock.unwrap().id;

    substreams::skip_empty_output();

    transactions.transactions_with_receipt.into_iter().for_each(|trx| {
        let trx_hash = &trx.receipt.unwrap().transaction_hash;
        match trx.transaction {
            Some(t) => {
                let trx_type: String;
                match t {
                    Transaction::InvokeTransactionV0(_) => {
                        trx_type = "InvokeTransactionV0".into();
                    }
                    Transaction::InvokeTransactionV1(_) => {
                        trx_type = "InvokeTransactionV1".into();
                    }
                    Transaction::InvokeTransactionV3(_) => {
                        trx_type = "InvokeTransactionV3".into();
                    }
                    Transaction::L1HandlerTransaction(_) => {
                        trx_type = "L1HandlerTransaction".into();
                    }
                    Transaction::DeclareTransactionV0(_) => {
                        trx_type = "DeclareTransactionV0".into();
                    }
                    Transaction::DeclareTransactionV1(_) => {
                        trx_type = "DeclareTransactionV1".into();
                    }
                    Transaction::DeclareTransactionV2(_) => {
                        trx_type = "DeclareTransactionV2".into();
                    }
                    Transaction::DeclareTransactionV3(_) => {
                        trx_type = "DeclareTransactionV3".into();
                    }
                    Transaction::DeployTransactionV0(_) => {
                        trx_type = "DeployTransactionV0".into();
                    }
                    Transaction::DeployAccountTransactionV1(_) => {
                        trx_type = "DeployAccountTransactionV1".into();
                    }
                    Transaction::DeployAccountTransactionV3(_) => {
                        trx_type = "DeployAccountTransactionV3".into();
                    }
                }

                let _ = tables.create_row(
                    "transactions",
                    [
                        ("block_number", block_number.to_string()),
                        ("block_hash", block_hash.to_string()),
                        ("trx_hash", trx_hash.as_string()),
                        ("trx_type", trx_type),
                    ],
                );
            }
            None => {
                //
            }
        }
    });

    Ok(tables.to_database_changes())
}