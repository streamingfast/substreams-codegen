mod pb;

use core::panic;
use pb::sf::substreams::cosmos::v1::*;
use substreams_database_change::pb::database::DatabaseChanges;
use substreams_database_change::tables::Tables as DatabaseChangeTables;

#[substreams::handlers::map]
fn db_out(events: EventList) -> Result<DatabaseChanges, substreams::errors::Error> {
    let mut tables = DatabaseChangeTables::new();
    let mut i = 0;

    events.events.into_iter().for_each(|event| {
        let trx_hash = &event.transaction_hash;
        let evt = event.event.unwrap();
        let mut j = 0;
        evt.attributes.into_iter().for_each(|attr| {
            let row = tables.create_row(
                "events",
                [
                    ("trx_hash", trx_hash.to_string()),
                    ("evt_idx", i.to_string()),
                    ("attr_idx", j.to_string()),
                ],
            );
            row.set("type", &evt.r#type);
            row.set("key", attr.key);
            row.set("value", attr.value);
            j = j + 1;
        });
        i = i + 1;
    });

    Ok(tables.to_database_changes())
}